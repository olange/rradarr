var search_data = {"index":{"searchIndex":["dicomelementshelper","exam","examcruncher","object","crunch()","crunch()","csv_colname_for()","csv_metadata_header()","empty?()","has_homogeneous_structure?()","has_images?()","has_scouts?()","html_graph_for()","images_already_read?()","new()","new()","read_images()","sort_images_by()","sort_images_by!()","source_dir=()","to_csv()","to_html()","copying","gemfile","readme","readme_fixtures"],"longSearchIndex":["dicomelementshelper","exam","examcruncher","object","examcruncher::crunch()","examcruncher#crunch()","dicomelementshelper::csv_colname_for()","exam#csv_metadata_header()","exam#empty?()","exam#has_homogeneous_structure?()","exam#has_images?()","exam#has_scouts?()","object#html_graph_for()","exam#images_already_read?()","exam::new()","examcruncher::new()","exam#read_images()","exam#sort_images_by()","exam#sort_images_by!()","exam#source_dir=()","exam#to_csv()","exam#to_html()","","","",""],"info":[["DICOMElementsHelper","","DICOMElementsHelper.html","","<p>Noms et valeurs possibles de quelques éléments de données DICOM qui nous\nintéressent.\n"],["Exam","","Exam.html","","<p>Lit un jeu d’images DICOM d’un examen radiologique de type CTscan à partir\nd’un dossier source, en distinguant …\n"],["ExamCruncher","","ExamCruncher.html","","<p>Classe utilitaire qui commande l’extraction des métadonnées d’une série\nd’images DICOM et leur transcription …\n"],["Object","","Object.html","",""],["crunch","ExamCruncher","ExamCruncher.html#method-c-crunch","( args, options = {})",""],["crunch","ExamCruncher","ExamCruncher.html#method-i-crunch","( args)",""],["csv_colname_for","DICOMElementsHelper","DICOMElementsHelper.html#method-c-csv_colname_for","( element_tag)","<p>Compose et retourne le nom de colonne qui doit figurer dans un en-tête CSV\npour un élément DICOM désigné …\n"],["csv_metadata_header","Exam","Exam.html#method-i-csv_metadata_header","()","<p>Retourne un tableau contenant les noms des colonnes qui se trouveraient\ndans l’en-tête du fichier CSV …\n"],["empty?","Exam","Exam.html#method-i-empty-3F","()","<p>Retourne <code>false</code> si une image DICOM de type quelconque (normale\nou <em>scout</em>) au moins a été trouvée dans le …\n"],["has_homogeneous_structure?","Exam","Exam.html#method-i-has_homogeneous_structure-3F","()","<p>Retourne true si la structure de données de toutes les images est homogène\n(ou qu’il n’y a aucune image), …\n"],["has_images?","Exam","Exam.html#method-i-has_images-3F","()","<p>Retourne <code>true</code> si une image DICOM au moins a été extraite du\ndossier source, <code>false</code> dans le cas contraire …\n"],["has_scouts?","Exam","Exam.html#method-i-has_scouts-3F","()","<p>Retourne <code>true</code> si une image DICOM de type <em>scout</em> au\nmoins a été extraite du dossier source, <code>false</code> dans …\n"],["html_graph_for","Object","Object.html#method-i-html_graph_for","( data, title)","<p>Retourne un document HTML permettant de tracer un histogramme à partir d’un\nensemble de coordonnées &lt; …\n"],["images_already_read?","Exam","Exam.html#method-i-images_already_read-3F","()","<p>Retourne true si les fichiers des images DICOM ont été intégralement lus\n(dans quel cas @images et/ou …\n"],["new","Exam","Exam.html#method-c-new","( dir_path = nil, options = {})","<p>Créé un nouvel examen à partir du jeu d’images DICOM qui se trouve dans un\ndossier source. Si aucun dossier …\n"],["new","ExamCruncher","ExamCruncher.html#method-c-new","( options = {})",""],["read_images","Exam","Exam.html#method-i-read_images","()","<p>Lecture de toutes les images DICOM qui se trouvent dans le dossier source\n(qui doit évidemment avoir …\n"],["sort_images_by","Exam","Exam.html#method-i-sort_images_by","( order = :slice_location)","<p>Retourne une copie des images réordonnées selon l’argument\n<code>order</code>:\n<p>s’il vaut <code>:slice_location</code>, réordonne …\n"],["sort_images_by!","Exam","Exam.html#method-i-sort_images_by-21","( order = :slice_location)","<p>Identique à sort_images_by, si ce n’est que les images de l’examen sont\nréordonnées « in place ».\n"],["source_dir=","Exam","Exam.html#method-i-source_dir-3D","( dir_path)","<p>Définit le chemin d’accès au dossier source, qui contient le jeu d’images\nDICOM à traiter.\n<p>Commande ensuite …\n"],["to_csv","Exam","Exam.html#method-i-to_csv","( output_file)","<p>Transcrit les métadonnées d’une image DICOM dans un fichier CSV.\n<p>Le paramètre ‘output_file’ doit contenir …\n"],["to_html","Exam","Exam.html#method-i-to_html","( output_file)",""],["COPYING","","COPYING.html","","\n<pre>                   GNU GENERAL PUBLIC LICENSE\n                      Version 3, 29 June 2007\n\nCopyright ...</pre>\n"],["Gemfile","","Gemfile.html","","<p># Source d’autorité pour le téléchargement des librairies\n<p>source :rubygems\n<p># Librairies requises par le …\n"],["README","","README_rdoc.html","","<p>Analyse d’un examen radiologique CTscan\n<p>Pour un examen radiologique de type <strong>CTscan</strong>, cette\nlibrairie permet: …\n"],["README_fixtures","","test/fixtures/README_fixtures_rdoc.html","","<p>Jeux de fichiers DICOM de test\n<p>Le dossier <code>test/fixtures/</code> contient plusieurs jeux d’images\nDICOM destinés …\n"]]}}